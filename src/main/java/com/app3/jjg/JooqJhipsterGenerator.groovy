package com.app3.jjg

import org.jooq.util.GeneratorStrategy
import org.jooq.util.JavaGenerator
import org.jooq.util.SchemaDefinition

/**
 * Extends the built-in JOOQ generator in order to generate a couple extra beans
 * that are handy for people working with JHipster (Spring Boot).
 */
class JooqJhipsterGenerator extends JavaGenerator {

    class Bucket {
        String fullRecordName
        String daoName
        String fullDaoFileName
        String recordName
        String fullDaoName

        @Override
        public String toString() {
            return "Bucket{" +
                    "fullRecordName='" + fullRecordName + '\'' +
                    ", daoName='" + daoName + '\'' +
                    ", fullDaoFileName='" + fullDaoFileName + '\'' +
                    ", recordName='" + recordName + '\'' +
                    ", fullDaoName='" + fullDaoName + '\'' +
                    '}';
        }
    }

    List<Bucket> buckets = []
    def packageName
    String outdir
    def header = """
/**
 * Generated by JooqJhipsterGenerator.  DO NOT EDIT.
 * Generated at ${new Date().toTimestamp().toString()}
 * Generator written by will.mitchell@gmail.com
 * License: MIT
 * Use at your own risk.
 */
"""


    @Override
    protected void generateSchema(SchemaDefinition schema) {
        super.generateSchema(schema)
        println "In generate schema"
        packageName = getStrategy().getJavaPackageName(schema)
        buckets = schema.tables
                .findAll {
            def name = getStrategy().getJavaClassName(it, GeneratorStrategy.Mode.DAO)
            println "candidate database name: ${name}"
            !(name.toLowerCase().contains("databasechange"))
        }
        .collect { table ->
            new Bucket(
                    fullRecordName: getStrategy().getFullJavaClassName(table, GeneratorStrategy.Mode.RECORD),
                    recordName: getStrategy().getJavaClassName(table, GeneratorStrategy.Mode.RECORD),
                    daoName: getStrategy().getJavaClassName(table, GeneratorStrategy.Mode.DAO),
                    fullDaoName: getStrategy().getFullJavaClassName(table, GeneratorStrategy.Mode.DAO),
                    fullDaoFileName: getStrategy().getFileName(table, GeneratorStrategy.Mode.DAO)
            )
        }
        outdir = "src/main/generated/${packageName.replace('.', '/')}"

        generateCustom()
    }

    void generateCustom() {
        println "Time to generate code for buckets: ${buckets}"
        def decls = buckets.collect {

            """
    @Bean
    public ${it.fullDaoName} get${it.recordName}(){
        return new ${it.fullDaoName}(configuration);
    }

"""
        }.join('\n')

        new File(outdir).mkdirs()


        String fname = "${outdir}/DaoConfiguration.java"
        new File(fname).text = """
package ${packageName};

import org.jooq.Configuration;
import org.springframework.context.annotation.Bean;
import javax.inject.Inject;

${header}
@org.springframework.context.annotation.Configuration
public class DaoConfiguration {

    @Inject
    Configuration configuration;

    ${decls}

}
"""

// Generate fat base class for services to use that provides direct access to Daos.

        decls = buckets.collect {

            def camelName = it.daoName
            camelName = camelName.substring(0, 1).toLowerCase() + camelName.substring(1);

            """
    @Inject
    public ${it.fullDaoName} ${camelName};


"""
        }.join('\n')

        fname = "${outdir}/AllDaos.java"
        new File(fname).text = """
package ${packageName};

import org.jooq.impl.DefaultDSLContext;

import javax.inject.Inject;

${header}
public class AllDaos {

    @Inject
    public DefaultDSLContext dsl;

    ${decls}

}
"""

    }
}
